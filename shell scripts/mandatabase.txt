CAT(1)                                      User Commands                                      CAT(1)

NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/> Report cat translation
       bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       tac(1)

       The full documentation for cat is maintained as a Texinfo manual.  If the info  and  cat  pro‐
       grams are properly installed at your site, the command

              info coreutils 'cat invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                      CAT(1)
-----------------------------------------------------------------------------------------------------
LS(1)                                       User Commands                                       LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information about the FILEs (the current directory by default).  Sort entries alphabeti‐
       cally if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '--block-size=M' prints sizes in  units
              of 1,048,576 bytes; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with  -lt:  sort by, and show, ctime (time of last modification of file status informa‐
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'never', 'auto', or 'always' (the default); more  info
              below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can  be augmented with a --sort option, but any use of --sort=none (-U) disables group‐
              ing

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l, print sizes in human readable format (e.g., 1K 234M 2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default), slash (-p),  file-type
              (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage

       -l     use a long listing format

       -L, --dereference
              when  showing  file  information for a symbolic link, show information for the file the
              link references rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print raw entry names (don't treat e.g. control characters specially)

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output  is  a
              terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell, shell-always, c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size

       --sort=WORD
              sort  by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension
              (-X)

       --time=WORD
              with -l, show time as WORD instead of default modification time: atime or access or use
              (-u) ctime or status (-c); also use specified time as sort key if --sort=time

       --time-style=STYLE
              with  -l,  show  times  using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT;
              FORMAT is interpreted like in 'date'; if FORMAT is FORMAT1<newline>FORMAT2,  then  FOR‐
              MAT1 applies to non-recent files and FORMAT2 to recent files; if STYLE is prefixed with
              'posix-', STYLE takes effect only outside the POSIX locale

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort  by  name;
              otherwise: sort by access time

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              assume screen width instead of current value

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -1     list one file per line

       SELinux options:

       --lcontext
              Display  security  context.    Enable -l. Lines will probably be too wide for most dis‐
              plays.

       -Z, --context
              Display security context so it fits on most displays.  Displays only mode, user, group,
              security context and file name.

       --scontext
              Display only security context and file name.

       --help display this help and exit

       --version
              output version information and exit

       SIZE is an integer and optional unit (example: 10M is 10*1024*1024).  Units are K, M, G, T, P,
       E, Z, Y (powers of 1024) or KB, MB, ... (powers of 1000).

       Using color to distinguish file types is disabled both  by  default  and  with  --color=never.
       With  --color=auto, ls emits color codes only when standard output is connected to a terminal.
       The LS_COLORS environment variable can change the settings.  Use the dircolors command to  set
       it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report ls translation bugs
       to <http://translationproject.org/team/>

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       The full documentation for ls is maintained as a Texinfo manual.  If the info and ls  programs
       are properly installed at your site, the command

              info coreutils 'ls invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                       LS(1)
-----------------------------------------------------------------------------------------------------
MKDIR(1)                                    User Commands                                    MKDIR(1)

NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory to the default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       GNU  coreutils  online help: <http://www.gnu.org/software/coreutils/> Report mkdir translation
       bugs to <http://translationproject.org/team/>

AUTHOR
       Written by David MacKenzie.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       mkdir(2)

       The full documentation for mkdir is maintained as a Texinfo manual.  If  the  info  and  mkdir
       programs are properly installed at your site, the command

              info coreutils 'mkdir invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                    MKDIR(1)
-----------------------------------------------------------------------------------------------------
CP(1)                                       User Commands                                       CP(1)

NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if  an existing destination file cannot be opened, remove it and try again (this option
              is ignored when the -n option is also used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the specified attributes  (default:  mode,ownership,timestamps),  if  possible
              additional attributes: context, links, xattr, all

       -c     deprecated, same as --preserve=context

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove  each  existing  destination  file  before  attempting to open it (contrast with
              --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is newer than the destination file or when the  destina‐
              tion file is missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By  default,  sparse SOURCE files are detected by a crude heuristic and the corresponding DEST
       file is made sparse as well.   That  is  the  behavior  selected  by  --sparse=auto.   Specify
       --sparse=always  to  create a sparse DEST file whenever the SOURCE file contains a long enough
       sequence of zero bytes.  Use --sparse=never to inhibit creation of sparse files.

       When --reflink[=always] is specified, perform a lightweight copy, where the  data  blocks  are
       copied  only  when  modified.  If this is not possible the copy fails, or if --reflink=auto is
       specified, fall back to a standard copy.

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version  con‐
       trol method may be selected via the --backup option or through the VERSION_CONTROL environment
       variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As a special case, cp makes a backup of SOURCE when the force and backup options are given and
       SOURCE and DEST are the same name for an existing, regular file.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report cp translation bugs
       to <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       The full documentation for cp is maintained as a Texinfo manual.  If the info and cp  programs
       are properly installed at your site, the command

              info coreutils 'cp invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                       CP(1)
-----------------------------------------------------------------------------------------------------
MV(1)                                       User Commands                                       MV(1)

NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final one takes effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move  only when the SOURCE file is newer than the destination file or when the destina‐
              tion file is missing

       -v, --verbose              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version  con‐
       trol method may be selected via the --backup option or through the VERSION_CONTROL environment
       variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report mv translation bugs
       to <http://translationproject.org/team/>

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright  ©  2013  Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO  WARRANTY,  to
       the extent permitted by law.

SEE ALSO
       rename(2)

       The  full documentation for mv is maintained as a Texinfo manual.  If the info and mv programs
       are properly installed at your site, the command

              info coreutils 'mv invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                       MV(1)
-----------------------------------------------------------------------------------------------------
VIM(1)                                 General Commands Manual                                 VIM(1)

NAME
       vim - Vi IMproved, a programmers text editor

SYNOPSIS
       vim [options] [file ..]
       vim [options] -
       vim [options] -t tag
       vim [options] -q [errorfile]

       ex gex
       view
       gvim gview vimx evim eview
       rvim rview rgvim rgview

DESCRIPTION
       Vim  is  a  text editor that is upwards compatible to Vi.  It can be used to edit all kinds of
       plain text.  It is especially useful for editing programs.

       There are a lot of enhancements above Vi: multi level undo, multi windows and buffers,  syntax
       highlighting, command line editing, filename completion, on-line help, visual selection, etc..
       See ":help vi_diff.txt" for a summary of the differences between Vim and Vi.

       While running Vim a lot of help can be obtained from the on-line help system, with the ":help"
       command.  See the ON-LINE HELP section below.

       Most often Vim is started to edit a single file with the command

            vim file

       More generally Vim is started with:

            vim [options] [filelist]

       If the filelist is missing, the editor will start with an empty buffer.  Otherwise exactly one
       out of the following four may be used to choose one or more files to be edited.

       file ..     A list of filenames.  The first one will be the current file  and  read  into  the
                   buffer.   The  cursor will be positioned on the first line of the buffer.  You can
                   get to the other files with the ":next" command.  To edit a file that starts  with
                   a dash, precede the filelist with "--".

       -           The  file to edit is read from stdin.  Commands are read from stderr, which should
                   be a TTY.

       -t {tag}    The file to edit and the initial cursor position depends on a  "tag",  a  sort  of
                   goto  label.  {tag} is looked up in the tags file, the associated file becomes the
                   current file and the associated command is executed.  Mostly this is  used  for  C
                   programs,  in  which  case {tag} could be a function name.  The effect is that the
                   file containing that function becomes the current file and  the  cursor  is  posi‐
                   tioned on the start of the function.  See ":help tag-commands".

       -q [errorfile]
                   Start  in quickFix mode.  The file [errorfile] is read and the first error is dis‐
                   played.  If [errorfile] is omitted, the filename is obtained from the  'errorfile'
                   option  (defaults  to  "AztecC.Err" for the Amiga, "errors.err" on other systems).
                   Further errors can be jumped to with the ":cn" command.  See ":help quickfix".

       Vim behaves differently, depending on the name of the command (the executable may still be the
       same file).

       vim       The "normal" way, everything is default.

       ex        Start  in Ex mode.  Go to Normal mode with the ":vi" command.  Can also be done with
                 the "-e" argument.

       view      Start in read-only mode.  You will be protected from writing the files.  Can also be
                 done with the "-R" argument.

       gvim gview
                 The GUI version.  Starts a new window.

       gex       Starts a new gvim window in Ex mode. Can also be done with the "-e" argument to gvim

       vimx      Starts  gvim  in "Vi" mode similar to "vim", but with additional features like xterm
                 clipboard support

       evim eview
                 The GUI version in easy mode.  Starts a new window.  Can also be done with the  "-y"
                 argument.

       rvim rview rgvim rgview
                 Like  the above, but with restrictions.  It will not be possible to start shell com‐
                 mands, or suspend Vim.  Can also be done with the "-Z" argument.

OPTIONS
       The options may be given in any order, before or after filenames.  Options without an argument
       can be combined after a single dash.

       +[num]      For the first file the cursor will be positioned on line "num".  If "num" is miss‐
                   ing, the cursor will be positioned on the last line.

       +/{pat}     For the first file the cursor will be positioned on the first occurrence of {pat}.
                   See ":help search-pattern" for the available search patterns.

       +{command}

       -c {command}
                   {command}  will  be  executed  after  the  first file has been read.  {command} is
                   interpreted as an Ex command.   If  the  {command}  contains  spaces  it  must  be
                   enclosed  in double quotes (this depends on the shell that is used).  Example: Vim
                   "+set si" main.c
                   Note: You can use up to 10 "+" or "-c" commands.

       -S {file}   {file} will be sourced after the first file has been read.  This is equivalent  to
                   -c  "source  {file}".   {file}  cannot start with '-'.  If {file} is omitted "Ses‐
                   sion.vim" is used (only works when -S is the last argument).

       --cmd {command}
                   Like using "-c", but the command is executed  just  before  processing  any  vimrc
                   file.  You can use up to 10 of these commands, independently from "-c" commands.

       -A          If  Vim  has  been compiled with ARABIC support for editing right-to-left oriented
                   files and Arabic keyboard mapping, this option starts Vim  in  Arabic  mode,  i.e.
                   'arabic' is set.  Otherwise an error message is given and Vim aborts.

       -b          Binary mode.  A few options will be set that makes it possible to edit a binary or
                   executable file.

       -C          Compatible.  Set the 'compatible' option.  This will make Vim behave  mostly  like
                   Vi, even though a .vimrc file exists.

       -d          Start  in diff mode.  There should be two, three or four file name arguments.  Vim
                   will open all the files and show differences between them.  Works like vimdiff(1).

       -d {device} Open  {device}  for  use  as  a  terminal.   Only  on  the  Amiga.   Example:  "-d
                   con:20/30/600/150".

       -D          Debugging.  Go to debugging mode when executing the first command from a script.

       -e          Start Vim in Ex mode, just like the executable was called "ex".

       -E          Start Vim in improved Ex mode, just like the executable was called "exim".

       -f          Foreground.   For  the GUI version, Vim will not fork and detach from the shell it
                   was started in.  On the Amiga, Vim is not restarted to open a  new  window.   This
                   option  should  be  used  when Vim is executed by a program that will wait for the
                   edit session to finish (e.g. mail).  On the Amiga the ":sh" and ":!" commands will
                   not work.

       --nofork    Foreground.   For  the GUI version, Vim will not fork and detach from the shell it
                   was started in.

       -F          If Vim has been compiled with FKMAP support  for  editing  right-to-left  oriented
                   files  and  Farsi  keyboard  mapping,  this  option starts Vim in Farsi mode, i.e.
                   'fkmap' and 'rightleft' are set.  Otherwise an error  message  is  given  and  Vim
                   aborts.

       -g          If Vim has been compiled with GUI support, this option enables the GUI.  If no GUI
                   support was compiled in, an error message is given and Vim aborts.

       -h          Give a bit of help about the command line arguments and options.  After  this  Vim
                   exits.

       -H          If Vim has been compiled with RIGHTLEFT support for editing right-to-left oriented
                   files and Hebrew keyboard mapping, this option starts Vim  in  Hebrew  mode,  i.e.
                   'hkmap'  and  'rightleft'  are  set.   Otherwise an error message is given and Vim
                   aborts.

       -i {viminfo}
                   When using the viminfo file is enabled, this option  sets  the  filename  to  use,
                   instead of the default "~/.viminfo".  This can also be used to skip the use of the
                   .viminfo file, by giving the name "NONE".

       -L          Same as -r.

       -l          Lisp mode.  Sets the 'lisp' and 'showmatch' options on.

       -m          Modifying files is disabled.  Resets the 'write' option.  You can still modify the
                   buffer, but writing a file is not possible.

       -M          Modifications not allowed.  The 'modifiable' and 'write' options will be unset, so
                   that changes are not allowed and files  can  not  be  written.   Note  that  these
                   options can be set to enable making modifications.

       -N          No-compatible  mode.   Reset the 'compatible' option.  This will make Vim behave a
                   bit better, but less Vi compatible, even though a .vimrc file does not exist.

       -n          No swap file will be used.  Recovery after a crash will be impossible.   Handy  if
                   you  want  to  edit  a file on a very slow medium (e.g. floppy).  Can also be done
                   with ":set uc=0".  Can be undone with ":set uc=200".

       -nb         Become an editor server for NetBeans.  See the docs for details.

       -o[N]       Open N windows stacked.  When N is omitted, open one window for each file.

       -O[N]       Open N windows side by side.  When N is omitted, open one window for each file.

       -p[N]       Open N tab pages.  When N is omitted, open one tab page for each file.

       -R          Read-only mode.  The 'readonly' option will be set.  You can still edit  the  buf‐
                  fer,  but  will be prevented from accidentally overwriting a file.  If you do want
                   to overwrite a file, add an exclamation mark to the Ex command, as in ":w!".   The
                   -R  option  also  implies the -n option (see below).  The 'readonly' option can be
                   reset with ":set noro".  See ":help 'readonly'".

       -r          List swap files, with information about using them for recovery.

       -r {file}   Recovery mode.  The swap file is used to recover a crashed editing  session.   The
                   swap  file is a file with the same filename as the text file with ".swp" appended.
                   See ":help recovery".

       -s          Silent mode.  Only when started as "Ex" or when the "-e" option was  given  before
                   the "-s" option.

       -s {scriptin}
                   The script file {scriptin} is read.  The characters in the file are interpreted as
                   if you had  typed  them.   The  same  can  be  done  with  the  command  ":source!
                   {scriptin}".   If  the end of the file is reached before the editor exits, further
                   characters are read from the keyboard.

       -T {terminal}
                   Tells Vim the name of the terminal you are using.  Only required  when  the  auto‐
                   matic way doesn't work.  Should be a terminal known to Vim (builtin) or defined in
                   the termcap or terminfo file.

       -u {vimrc}  Use the commands in the file {vimrc} for initializations.  All the other  initial‐
                   izations  are  skipped.  Use this to edit a special kind of files.  It can also be
                   used to skip all initializations by giving the name "NONE".  See  ":help  initial‐
                   ization" within vim for more details.

       -U {gvimrc} Use  the commands in the file {gvimrc} for GUI initializations.  All the other GUI
                   initializations are skipped.  It can also be used to skip all GUI  initializations
                   by giving the name "NONE".  See ":help gui-init" within vim for more details.

       -V[N]       Verbose.   Give messages about which files are sourced and for reading and writing
                   a viminfo file.  The optional number N is the value for 'verbose'.  Default is 10.

       -v          Start Vim in Vi mode, just like the executable was called  "vi".   This  only  has
                   effect when the executable is called "ex".

       -w {scriptout}
                   All  the  characters that you type are recorded in the file {scriptout}, until you
                   exit Vim.  This is useful if you want to create a script file to be used with "vim
                   -s" or ":source!".  If the {scriptout} file exists, characters are appended.

       -W {scriptout}
                   Like -w, but an existing file is overwritten.

       -x          Use encryption when writing files.  Will prompt for a crypt key.

       -X          Don't  connect to the X server.  Shortens startup time in a terminal, but the win‐
                   dow title and clipboard will not be used.

       -y          Start Vim in easy mode, just like the executable was  called  "evim"  or  "eview".
                   Makes Vim behave like a click-and-type editor.

       -Z          Restricted mode.  Works like the executable starts with "r".

       --          Denotes  the  end  of the options.  Arguments after this will be handled as a file
                   name.  This can be used to edit a filename that starts with a '-'.

       --echo-wid  GTK GUI only: Echo the Window ID on stdout.

       --help      Give a help message and exit, just like "-h".

       --literal   Take file name arguments literally, do not expand wildcards.  This has  no  effect
                   on Unix where the shell expands wildcards.

       --noplugin  Skip loading plugins.  Implied by -u NONE.

       --remote    Connect  to a Vim server and make it edit the files given in the rest of the argu‐
                   ments.  If no server is found a warning is given and the files are edited  in  the
                   current Vim.

       --remote-expr {expr}
                   Connect to a Vim server, evaluate {expr} in it and print the result on stdout.

       --remote-send {keys}
                   Connect to a Vim server and send {keys} to it.

       --remote-silent
                   As --remote, but without the warning when no server is found.

       --remote-wait
                   As --remote, but Vim does not exit until the files have been edited.

       --remote-wait-silent
                   As --remote-wait, but without the warning when no server is found.

       --remote-tab[-wait][-silent]
                   As --remote but use tab page per file

       --role      Set a unique role to identify the main window

       --serverlist
                   List the names of all Vim servers that can be found.

       --servername {name}
                   Use  {name}  as  the  server  name.   Used for the current Vim, unless used with a
                   --remote argument, then it's the name of the server to connect to.

       --socketid {id}
                   GTK GUI only: Use the GtkPlug mechanism to run gvim in another window.

       --version   Print version information and exit.

ON-LINE HELP
       Type ":help" in Vim to get started.  Type ":help subject" to get help on a  specific  subject.
       For  example:  ":help  ZZ" to get help for the "ZZ" command.  Use <Tab> and CTRL-D to complete
       subjects (":help cmdline-completion").  Tags are present to jump from  one  place  to  another
       (sort  of  hypertext  links, see ":help").  All documentation files can be viewed in this way,
       for example ":help syntax.txt".

FILES
       /usr/share/vim/vim74/doc/*.txt
                      The Vim documentation files.  Use ":help doc-file-list"  to  get  the  complete
                      list.

       /usr/share/vim/vim74/doc/tags
                      The tags file used for finding information in the documentation files.

       /usr/share/vim/vim74/syntax/syntax.vim
                      System wide syntax initializations.

       /usr/share/vim/vim74/syntax/*.vim
                      Syntax files for various languages.

       /etc/vimrc     System wide Vim initializations.

       ~/.vimrc       Your personal Vim initializations.

       /etc/gvimrc    System wide gvim initializations.

       ~/.gvimrc      Your personal gvim initializations.

       /usr/share/vim/vim74/optwin.vim
                      Script used for the ":options" command, a nice way to view and set options.

       /usr/share/vim/vim74/menu.vim
                      System wide menu initializations for gvim.

       /usr/share/vim/vim74/bugreport.vim
                      Script to generate a bug report.  See ":help bugs".

       /usr/share/vim/vim74/filetype.vim
                      Script to detect the type of a file by its name.  See ":help 'filetype'".

       /usr/share/vim/vim74/scripts.vim
                      Script to detect the type of a file by its contents.  See ":help 'filetype'".

       /usr/share/vim/vim74/print/*.ps
                      Files used for PostScript printing.

       For recent info read the VIM home page:
       <URL:http://www.vim.org/>

SEE ALSO
       vimtutor(1)

AUTHOR
       Most  of  Vim was made by Bram Moolenaar, with a lot of help from others.  See ":help credits"
       in Vim.
       Vim is based on Stevie, worked on by: Tim Thompson,  Tony  Andrews  and  G.R.  (Fred)  Walter.
       Although hardly any of the original code remains.

BUGS
       Probably.  See ":help todo" for a list of known problems.

       Note  that  a  number  of things that may be regarded as bugs by some, are in fact caused by a
       too-faithful reproduction of Vi's behaviour.  And if you think other things are bugs  "because
       Vi  does it differently", you should take a closer look at the vi_diff.txt file (or type :help
       vi_diff.txt when in Vim).  Also have a look at the 'compatible' and 'cpoptions' options.

                                             2006 Apr 11                                       VIM(1)
-----------------------------------------------------------------------------------------------------
SED(1)                                      User Commands                                      SED(1)

NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is  a stream editor.  A stream editor is used to perform basic text transformations on an
       input stream (a file or input from a pipeline).  While in some ways similar to an editor which
       permits  scripted edits (such as ed), sed works by making only one pass over the input(s), and
       is consequently more efficient.  But it is sed's ability to filter text in  a  pipeline  which
       particularly distinguishes it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -c, --copy

              use copy instead of rename when shuffling files in -i mode

       -b, --binary

              does nothing; for compatibility with WIN32/CYGWIN/MSDOS/EMX ( open files in binary mode
              (CR+LFs are not treated specially))

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as a single continuous long stream.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush  the  output  buffers  more
              often

       -z, --null-data

              separate lines by NUL characters

       --help

              display this help and exit

       --version

              output version information and exit

       If  no  -e, --expression, -f, or --file option is given, then the first non-option argument is
       taken as the sed script to interpret.  All remaining arguments are names of input files; if no
       input files are specified, then the standard input is read.

       GNU  sed  home  page:  <http://www.gnu.org/software/sed/>.   General  help using GNU software:
       <http://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.  Be sure to  include
       the word ``sed'' somewhere in the ``Subject:'' field.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to those who already know
       sed; other documentation (such as the texinfo document) must be consulted for fuller  descrip‐
       tions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately quit the sed script without processing any more input, except that if auto-
              print is not disabled the current pattern space will be printed.  The exit  code  argu‐
              ment is a GNU extension.

       Q [exit-code]
              Immediately  quit  the  sed  script  without  processing any more input.  This is a GNU
              extension.

       r filename
              Append text read from filename.

       R filename
              Append a line read from filename.  Each invocation of the command reads a line from the
              file.  This is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace  the  selected  lines  with text, which has each embedded newline preceded by a
              backslash.

       d      Delete pattern space.  Start next cycle.

       D      If pattern space contains no newline, start a normal new cycle as if the d command  was
              issued.   Otherwise,  delete  text  in  the  pattern space up to the first newline, and
              restart cycle with the resultant pattern space, without reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List out the current line in a ``visually unambiguous''  form,  breaking  it  at  width
              characters.  This is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
              Attempt to match regexp against the pattern space.  If successful, replace that portion
              matched with replacement.  The replacement may contain the special character & to refer
              to  that portion of the pattern space which matched, and the special escapes \1 through
              \9 to refer to the corresponding matching sub-expressions in the regexp.

       t label
              If a s/// has done a successful substitution since the last input  line  was  read  and
              since the last t or T command, then branch to label; if label is omitted, branch to end
              of script.

       T label
              If no s/// has done a successful substitution since the last input line  was  read  and
              since the last t or T command, then branch to label; if label is omitted, branch to end
              of script.  This is a GNU extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write the first line of the current pattern space to filename.  This is  a  GNU  exten‐
              sion.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate  the characters in the pattern space which appear in source to the corre‐
              sponding character in dest.

Addresses
       Sed commands can be given with no addresses, in which case the command will  be  executed  for
       all  input  lines; with one address, in which case the command will only be executed for input
       lines which match that address; or with two addresses, in which case the command will be  exe‐
       cuted  for  all  input  lines which match the inclusive range of lines starting from the first
       address and continuing to the second address.  Three things to note about address ranges:  the
       syntax  is  addr1,addr2  (i.e.,  the addresses are separated by a comma); the line which addr1
       matched will always be accepted, even if addr2 selects an earlier line; and if addr2 is a reg‐
       exp, it will not be tested against the line that addr1 matched.

       After  the  address  (or  address-range),  and before the command, a !  may be inserted, which
       specifies that the command shall only be executed if the address (or address-range)  does  not
       match.

       The following address types are supported:

       number Match  only  the  specified  line  number  (which increments cumulatively across files,
              unless the -s option is specified on the command line).

       first~step
              Match every step'th line starting with line first.  For example, ``sed -n  1~2p''  will
              print  all  the  odd-numbered lines in the input stream, and the address 2~5 will match
              every fifth line, starting with the second.  first can be zero; in this case, sed oper‐
              ates as if it were equal to step.  (This is an extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match lines matching the regular expression regexp.  The c may be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start  out  in "matched first address" state, until addr2 is found.  This is similar to
              1,addr2, except that if addr2 matches the very first line of  input  the  0,addr2  form
              will  be  at the end of its range, whereas the 1,addr2 form will still be at the begin‐
              ning of its range.  This works only when addr2 is a regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will match addr1 and the lines following addr1 until the next  line  whose  input  line
              number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2  BREs should be supported, but they aren't completely because of performance problems.
       The \n sequence in a regular expression matches the newline character, and similarly  for  \a,
       \t, and other sequences.

BUGS
       E-mail  bug  reports to bug-sed@gnu.org.  Also, please include the output of ``sed --version''
       in the body of your report if at all possible.

AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken  Pizzini,  and  Paolo  Bonzini.   GNU  sed  home  page:
       <http://www.gnu.org/software/sed/>.       General      help      using      GNU      software:
       <http://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.  Be sure to  include
       the word ``sed'' somewhere in the ``Subject:'' field.

COPYRIGHT
       Copyright  ©  2012  Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO  WARRANTY,  to
       the extent permitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ
       (http://sed.sf.net/grabbag/tutorials/sedfaq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If the info and sed pro‐
       grams are properly installed at your site, the command

              info sed

       should give you access to the complete manual.

sed 4.2.2                                   September 2020                                     SED(1)
-----------------------------------------------------------------------------------------------------
SORT(1)                                     User Commands                                     SORT(1)

NAME
       sort - sort lines of text files

SYNOPSIS
       sort [OPTION]... [FILE]...
       sort [OPTION]... --files0-from=F

DESCRIPTION
       Write sorted concatenation of all FILE(s) to standard output.

       Mandatory arguments to long options are mandatory for short options too.  Ordering options:

       -b, --ignore-leading-blanks
              ignore leading blanks

       -d, --dictionary-order
              consider only blanks and alphanumeric characters

       -f, --ignore-case
              fold lower case to upper case characters

       -g, --general-numeric-sort
              compare according to general numerical value

       -i, --ignore-nonprinting
              consider only printable characters

       -M, --month-sort
              compare (unknown) < 'JAN' < ... < 'DEC'

       -h, --human-numeric-sort
              compare human readable numbers (e.g., 2K 1G)

       -n, --numeric-sort
              compare according to string numerical value

       -R, --random-sort
              sort by random hash of keys

       --random-source=FILE
              get random bytes from FILE

       -r, --reverse
              reverse the result of comparisons

       --sort=WORD
              sort  according  to  WORD:  general-numeric -g, human-numeric -h, month -M, numeric -n,
              random -R, version -V

       -V, --version-sort
              natural sort of (version) numbers within text

       Other options:

       --batch-size=NMERGE
              merge at most NMERGE inputs at once; for more use temp files

       -c, --check, --check=diagnose-first
              check for sorted input; do not sort

       -C, --check=quiet, --check=silent
              like -c, but do not report first bad line

       --compress-program=PROG
              compress temporaries with PROG; decompress them with PROG -d

       --debug
              annotate the part of the line used to sort, and warn about questionable usage to stderr

       --files0-from=F
              read input from the files specified by NUL-terminated names in file F; If F is  -  then
              read names from standard input

       -k, --key=KEYDEF
              sort via a key; KEYDEF gives location and type

       -m, --merge
              merge already sorted files; do not sort

       -o, --output=FILE
              write result to FILE instead of standard output

       -s, --stable
              stabilize sort by disabling last-resort comparison

       -S, --buffer-size=SIZE
              use SIZE for main memory buffer

       -t, --field-separator=SEP
              use SEP instead of non-blank to blank transition

       -T, --temporary-directory=DIR
              use  DIR for temporaries, not $TMPDIR or /tmp; multiple options specify multiple direc‐
              tories

       --parallel=N
              change the number of sorts run concurrently to N

       -u, --unique
              with -c, check for strict ordering; without -c, output only the first of an equal run

       -z, --zero-terminated
              end lines with 0 byte, not newline

       --help display this help and exit

       --version
              output version information and exit

       KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and
       C  a character position in the field; both are origin 1, and the stop position defaults to the
       line's end.  If neither -t nor -b is in effect, characters in a field  are  counted  from  the
       beginning  of  the  preceding  whitespace.  OPTS is one or more single-letter ordering options
       [bdfgiMhnRrV], which override global ordering options for that key.  If no key is  given,  use
       the entire line as the key.

       SIZE  may  be  followed  by the following multiplicative suffixes: % 1% of memory, b 1, K 1024
       (default), and so on for M, G, T, P, E, Z, Y.

       With no FILE, or when FILE is -, read standard input.

       *** WARNING *** The locale specified by the environment affects sort order.  Set  LC_ALL=C  to
       get the traditional sort order that uses native byte values.

       GNU  coreutils  online  help: <http://www.gnu.org/software/coreutils/> Report sort translation
       bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Mike Haertel and Paul Eggert.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       uniq(1)

       The full documentation for sort is maintained as a Texinfo manual.  If the info and sort  pro‐
       grams are properly installed at your site, the command

              info coreutils 'sort invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                     SORT(1)
-----------------------------------------------------------------------------------------------------
CHMOD(1)                                    User Commands                                    CHMOD(1)

NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This manual page documents the GNU version of chmod.  chmod changes the file mode bits of each
       given file according to mode, which can be either a  symbolic  representation  of  changes  to
       make, or an octal number representing the bit pattern for the new mode bits.

       The  format of a symbolic mode is [ugoa...][[+-=][perms...]...], where perms is either zero or
       more letters from the set rwxXst, or a single letter from  the  set  ugo.   Multiple  symbolic
       modes can be given, separated by commas.

       A  combination  of  the letters ugoa controls which users' access to the file will be changed:
       the user who owns it (u), other users in the file's group (g), other users not in  the  file's
       group  (o),  or  all users (a).  If none of these are given, the effect is as if a were given,
       but bits that are set in the umask are not affected.

       The operator + causes the selected file mode bits to be added to the existing file  mode  bits
       of  each  file;  -  causes them to be removed; and = causes them to be added and causes unmen‐
       tioned bits to be removed except that a directory's unmentioned set user and group ID bits are
       not affected.

       The  letters rwxXst select file mode bits for the affected users: read (r), write (w), execute
       (or search for directories) (x), execute/search only if the file is a directory or already has
       execute  permission for some user (X), set user or group ID on execution (s), restricted dele‐
       tion flag or sticky bit (t).  Instead of one or more of these letters, you can specify exactly
       one of the letters ugo: the permissions granted to the user who owns the file (u), the permis‐
       sions granted to other users who are members of the file's  group  (g),  and  the  permissions
       granted to users that are in neither of the two preceding categories (o).

       A numeric mode is from one to four octal digits (0-7), derived by adding up the bits with val‐
       ues 4, 2, and 1.  Omitted digits are assumed to be leading zeros.  The first digit selects the
       set  user  ID  (4) and set group ID (2) and restricted deletion or sticky (1) attributes.  The
       second digit selects permissions for the user who owns the file: read (4), write (2), and exe‐
       cute  (1);  the  third  selects permissions for other users in the file's group, with the same
       values; and the fourth for other users not in the file's group, with the same values.

       chmod never changes the permissions of symbolic links; the chmod  system  call  cannot  change
       their  permissions.   This  is not a problem since the permissions of symbolic links are never
       used.  However, for each symbolic link listed on the command line, chmod changes  the  permis‐
       sions  of  the  pointed-to file.  In contrast, chmod ignores symbolic links encountered during
       recursive directory traversals.

SETUID AND SETGID BITS
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match  the
       user's  effective  group  ID or one of the user's supplementary group IDs, unless the user has
       appropriate privileges.  Additional restrictions may cause the  set-user-ID  and  set-group-ID
       bits of MODE or RFILE to be ignored.  This behavior depends on the policy and functionality of
       the underlying chmod system call.  When in doubt, check the underlying system behavior.

       chmod preserves a directory's set-user-ID and set-group-ID bits unless you explicitly  specify
       otherwise.   You  can  set or clear the bits with symbolic modes like u+s and g-s, and you can
       set (but not clear) the bits with a numeric mode.

RESTRICTED DELETION FLAG OR STICKY BIT
       The restricted deletion flag or sticky bit is a single bit, whose  interpretation  depends  on
       the  file  type.   For directories, it prevents unprivileged users from removing or renaming a
       file in the directory unless they own the file or the directory; this is called the restricted
       deletion  flag  for  the  directory,  and is commonly found on world-writable directories like
       /tmp.  For regular files on some older systems, the bit saves the program's text image on  the
       swap device so it will load more quickly when run; this is called the sticky bit.

OPTIONS
       Change  the mode of each FILE to MODE.  With --reference, change the mode of each FILE to that
       of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report  chmod  translation
       bugs to <http://translationproject.org/team/>

AUTHOR
       Written by David MacKenzie and Jim Meyering.

COPYRIGHT
       Copyright  ©  2013  Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later
       <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO  WARRANTY,  to
       the extent permitted by law.

SEE ALSO
       chmod(2)

       The  full  documentation  for  chmod is maintained as a Texinfo manual.  If the info and chmod
       programs are properly installed at your site, the command

              info coreutils 'chmod invocation'

       should give you access to the complete manual.

GNU coreutils 8.22                          November 2020                                    CHMOD(1)
-----------------------------------------------------------------------------------------------------
RM(1)                                       User Commands                                       RM(1)

NAME
       rm - remove files or directories

SYNOPSIS
       rm [OPTION]... FILE...

DESCRIPTION
       This  manual  page  documents  the  GNU  version  of  rm.  rm removes each specified file.  By
       default, it does not remove directories.

       If the -I or --interactive=once option is given, and there are more than three  files  or  the
       -r,  -R,  or  --recursive  are given, then rm prompts the user for whether to proceed with the
       entire operation.  If the response is not affirmative, the entire command is aborted.

       Otherwise, if a file is unwritable, standard input is a terminal, and the -f or --force option
       is  not  given,  or  the  -i  or --interactive=always option is given, rm prompts the user for
       whether to remove the file.  If the response is not affirmative, the file is skipped.

OPTIONS
       Remove (unlink) the FILE(s).

       -f, --force
              ignore nonexistent files and arguments, never prompt

       -i     prompt before every removal

       -I     prompt once before removing more than three files, or when removing  recursively;  less
              intrusive than -i, while still giving protection against most mistakes

       --interactive[=WHEN]
              prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always

       --one-file-system
              when removing a hierarchy recursively, skip any directory that is on a file system dif‐
              ferent from that of the corresponding command line argument

       --no-preserve-root
              do not treat '/' specially

       --preserve-root
              do not remove '/' (default)

       -r, -R, --recursive
              remove directories and their contents recursively

       -d, --dir
              remove empty directories

       -v, --verbose
              explain what is being done

       --help display this help and exit

       --version
              output version information and exit

       By default, rm does not remove directories.  Use the --recursive (-r or -R) option  to  remove
       each listed directory, too, along with all of its contents.

       To remove a file whose name starts with a '-', for example '-foo', use one of these commands:

              rm -- -foo

              rm ./-foo

       Note  that  if  you  use rm to remove a file, it might be possible to recover some of its con‐
       tents, given sufficient expertise and/or time.  For greater assurance that  the  contents  are
       truly unrecoverable, consider using shred.

       GNU coreutils online help: <http://www.gnu.org/software/coreutils/> Report rm translation bugs
       to <http://translationproject.org/team/>

AUTHOR
       Written by Paul Rubin, David MacKenzie, Richard M. Stallman, and Jim Meyering.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version  3  or  later
       <http://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       unlink(1), unlink(2), chattr(1), shred(1)

       The full documentation for rm is maintained as a Texinfo manual.  If the info and rm  programs
       are properly installed at your site, the command

              info coreutils 'rm invocation'

       should give you access to the complete manual.

